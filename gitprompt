#!/bin/bash

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

HN=${HOSTNAME}
if [ ${SHORTHOST} ]
then
  HN=${SHORTHOST}
fi

function parse_git_branch {
  git rev-parse --git-dir &> /dev/null

  git_status="$(git status 2> /dev/null)"
  branch_pattern="^On branch ([-_A-Za-z0-9\/\.]*)[^A-Za-z0-9]"
  remote_pattern="Your branch is (.*) of"
  diverge_pattern="Your branch and (.*) have diverged"

  if [[ ! ${git_status} =~ "working tree clean" ]] ;
  then
    state=" ${RED}ðŸ’© "
  fi

  if [[ ! ${git_status} ]] ;
  then
    state=""
  fi

  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="${YELLOW}â†‘"
    else
      remote="${YELLOW}â†“"
    fi
  fi

  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}â†•"
  fi

  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  echo " (${branch})${remote}${state}"
}

function rbenv_version {
  local version=$(echo `rbenv version` | awk '{print $1}')
  [ "$version" != "" ] && version="$version"
  local full="<$version>"
  [ "$full" != "" ] && echo "${full}"
}

function prompt_func() {
    previous_return_value=$?;
    prompt="${TITLEBAR}${CYAN}[${RED}-:${HN}:- ${PURPLE}{\w} ${YELLOW}$(rbenv_version)${GREEN}$(parse_git_branch)${CYAN}]${COLOR_NONE} "
    if test $previous_return_value -eq 0
    then
        PS1="${prompt}âž” "
    else
        PS1="${prompt}${RED}âž”${COLOR_NONE} "
    fi

    if test ${UID} -eq 0
    then
      PS1="# "
    fi
}

PROMPT_COMMAND=prompt_func
alias git-fuckit='git clean -d -x -f; git reset --hard'
